import numpy as np

def normalize(v):
	s = sum(v)
	newV = []
	for i in v:
		newV.append(i / s)
	return newV

C_1 = [[1, 1 / 7, 1 / 5], [7, 1, 3], [5, 1 / 3, 1]]
C_2 = [[1, 5, 9], [1 / 5, 1, 4], [1 / 9, 1 / 4, 1]]
C_3 = [[1, 4, 1 / 5], [1 / 4, 1, 1 / 9], [5, 9, 1]]
C_4 = [[1, 9, 4], [1 / 9, 1, 1 / 4], [1 / 4, 4, 1]]
C_5 = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
C_6 = [[1, 6, 4], [1 / 6, 1, 1 / 3], [1 / 4, 3, 1]]
C_7 = [[1, 9, 6], [1 / 9, 1, 1 / 3], [1 / 6, 3, 1]]
C_8 = [[1, 1 / 2, 1 / 2], [2, 1, 1], [2, 1, 1]]

C_parametry = [[1, 4, 7, 5, 8, 6, 6, 2], [1 / 4, 1, 5, 3, 7, 6, 6, 1 / 3], [1 / 7, 1 / 5, 1, 1 / 3, 5, 3, 3, 1 / 5],
               [1 / 5, 1 / 3, 3, 1, 6, 3, 4, 1 / 2], [1 / 8, 1 / 7, 1 / 5, 1 / 6, 1, 1 / 3, 1 / 4, 1 / 7],
               [1 / 6, 1 / 6, 1 / 3, 1 / 3, 3, 1, 1 / 2, 1 / 5], [1 / 6, 1 / 6, 1 / 3, 1 / 4, 4, 2, 1, 1 / 5],
               [1 / 2, 3, 5, 2, 7, 5, 5, 1]]

C = [C_1, C_2, C_3, C_4, C_5, C_6, C_7, C_8, C_parametry]

k = []

def geo(m):
	k = []
	for i in range(len(m)):
	    mul = np.prod(m[i])
	    sqr = pow(mul, 1 / len(m))
	    k.append(sqr)
	k = normalize(k)
	return k

for i in C:
	k.append(geo(i))

res = np.transpose(np.array([k[0], k[1], k[2], k[3], k[4], k[5], k[6], k[7]]))
result = np.matmul(res, k[8])
print(result)
